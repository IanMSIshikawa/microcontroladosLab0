


ARM Macro Assembler    Page 1 


    1 00000000         ; main.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Prof. Guilherme Peron
    4 00000000         ; Ver 1 19/03/2018
    5 00000000         ; Ver 2 26/08/2018
    6 00000000         ; Este programa deve esperar o usuário pressionar uma ch
                       ave.
    7 00000000         ; Caso o usuário pressione uma chave, um LED deve piscar
                        a cada 1 segundo.
    8 00000000         
    9 00000000         ; ------------------------------------------------------
                       -------------------------
   10 00000000                 THUMB                        ; Instruções do tip
                                                            o Thumb-2
   11 00000000         ; ------------------------------------------------------
                       -------------------------
   12 00000000         
   13 00000000         ; Declarações EQU - Defines
   14 00000000         ;<NOME>         EQU <VALOR>
   15 00000000         ; ========================
   16 00000000         ; Definições de Valores
   17 00000000 00000020 
                       TRAN_PP5
                               EQU              2_00100000
   18 00000000 00000010 
                       TRAN_PB4
                               EQU              2_00010000
   19 00000000 00000020 
                       TRAN_PB5
                               EQU              2_00100000
   20 00000000         
   21 00000000         ; ------------------------------------------------------
                       -------------------------
   22 00000000         ; Área de Dados - Declarações de variáveis
   23 00000000                 AREA             DATA, ALIGN=2
   24 00000000         ; Se alguma variável for chamada em outro arquivo
   25 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       riável <var> a 
   26 00000000         ; partir de outro arquivo
   27 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       variável de nome <var>
   28 00000000         ; de <tam> bytes a partir da primeira 
   29 00000000         ; posição da RAM  
   30 00000000         
   31 00000000         ; ------------------------------------------------------
                       -------------------------
   32 00000000         ; Área de Código - Tudo abaixo da diretiva a seguir será
                        armazenado na memória de 
   33 00000000         ;                  código
   34 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   35 00000000         
   36 00000000         ; Se alguma função do arquivo for chamada em outro arqui
                       vo 
   37 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            função Start a part
                                                            ir de 
   38 00000000         ; outro arquivo. No caso startup.s
   39 00000000         



ARM Macro Assembler    Page 2 


   40 00000000         ; Se chamar alguma função externa 
   41 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   42 00000000         ; função <func>
   43 00000000                 IMPORT           PLL_Init
   44 00000000                 IMPORT           SysTick_Init
   45 00000000                 IMPORT           SysTick_Wait1ms
   46 00000000                 IMPORT           SysTick_Wait1us
   47 00000000                 IMPORT           GPIO_Init
   48 00000000                 IMPORT           PortP_Output
   49 00000000                 IMPORT           PortQ_Output
   50 00000000                 IMPORT           PortA_Output
   51 00000000                 IMPORT           PortB_Output
   52 00000000                 IMPORT           PortJ_Input
   53 00000000                 IMPORT           DecimalTo7Seg
   54 00000000                 IMPORT           DSA_DSB_Output
   55 00000000         
   56 00000000         
   57 00000000         ; ------------------------------------------------------
                       -------------------------
   58 00000000         ; Função main()
   59 00000000         Start
   60 00000000 F7FF FFFE       BL               PLL_Init    ;Chama a subrotina 
                                                            para alterar o cloc
                                                            k do microcontrolad
                                                            or para 80MHz
   61 00000004 F7FF FFFE       BL               SysTick_Init ;Chama a subrotina
                                                             para inicializar o
                                                             SysTick
   62 00000008 F7FF FFFE       BL               GPIO_Init   ;Chama a subrotina 
                                                            que inicializa os G
                                                            PIO
   63 0000000C         
   64 0000000C F04F 0000       MOV              R0, #0      ; function paramete
                                                            r
   65 00000010 F04F 0100       MOV              R1, #0      ; function paramete
                                                            r
   66 00000014 F04F 0601       MOV              R6, #1      ; estado anterior d
                                                            o bot?o 
   67 00000018 F04F 0700       MOV              R7, #0      ;couter_update_disp
                                                            
   68 0000001C F04F 03C8       LDR              R3, =200    ; max update dis
   69 00000020 F04F 0800       MOV              R8, #0      ; decimal dig 1
   70 00000024 F04F 0900       MOV              R9, #0      ; decimal dig 2
   71 00000028 F04F 0B01       MOV              R11, #1     ; ascending
   72 0000002C F04F 0C01       MOV              R12, #1     ; step
   73 00000030 F04F 0400       MOV              R4, #0      ; general_counter [
                                                            0 - 99]
   74 00000034         MainLoop
   75 00000034         ; ****************************************
   76 00000034         
   77 00000034         update_counter
   78 00000034         ;Configura display A, B
   79 00000034 4648            MOV              R0, R9
   80 00000036 4641            MOV              R1, R8
   81 00000038         
   82 00000038         ;Mostra valores de R0 e R1 nos display DS1 e DS2, respec
                       tivamente
   83 00000038 F7FF FFFE       BL               DSA_DSB_Output



ARM Macro Assembler    Page 3 


   84 0000003C F000 F85F       BL               Show_Leds
   85 00000040         ;Contador para esperar 1s
   86 00000040 F107 0701       ADD              R7, R7, #1
   87 00000044 429F            CMP              R7, R3
   88 00000046         
   89 00000046 D1F5            BNE              update_counter ; increase the c
                                                            ounter or not
   90 00000048 F04F 0700       MOV              R7, #0
   91 0000004C F1BB 0F01       CMP              R11, #1     ;ASCENDING ORDER?
   92 00000050 D004            BEQ              Ascending_Order
   93 00000052 D10F            BNE              Decrease_Order
   94 00000054 F000 F81B       BL               Check_Buttons
   95 00000058         
   96 00000058         
   97 00000058         end_of_increment
   98 00000058         
   99 00000058         
  100 00000058         
  101 00000058 E7EC            B                update_counter
  102 0000005A         ; ****************************************
  103 0000005A E7EB            B                MainLoop
  104 0000005C         
  105 0000005C         ;-------------------------------------------------------
                       -------------------------
  106 0000005C         ; Função Ascending_Order  
  107 0000005C         ; Parâmetro de entrada: R11 (COUNTER)
  108 0000005C         ; Parâmetro de saída: R9, R8
  109 0000005C         Ascending_Order
  110 0000005C 2C63            CMP              R4, #99     ; counter == 0
  111 0000005E BF08            IT               EQ
  112 00000060 2400            MOVEQ            R4, #0      ;reset counter
  113 00000062 BF18            IT               NE
  114 00000064 4464            ADDNE            R4, R12     ;counter+=step
  115 00000066 F04F 000A       MOV              R0, #10
  116 0000006A FBB4 F8F0       UDIV             R8, R4, R0  ;R8 recebe o diviso
                                                            r de R4 por 10
  117 0000006E FB08 4910       MLS              R9, R8, R0, R4 ;R9 = R4 - (R8*1
                                                            0) para verificar s
                                                            e ? zero depois
  118 00000072 E7F1            B                end_of_increment
  119 00000074         ;-------------------------------------------------------
                       -------------------------
  120 00000074         ; Função Decrease_Order
  121 00000074         ; Parâmetro de entrada: R11 (COUNTER)
  122 00000074         ; Parâmetro de saída: R9, R8
  123 00000074         Decrease_Order
  124 00000074 2C00            CMP              R4, #0      ; counter == 0
  125 00000076 BF08            IT               EQ
  126 00000078 2463            MOVEQ            R4, #99     ;reset counter
  127 0000007A BF18            IT               NE
  128 0000007C EBA4 040C       SUBNE            R4, R12     ;counter-=step
  129 00000080 F04F 000A       MOV              R0, #10
  130 00000084 FBB4 F8F0       UDIV             R8, R4, R0  ;R8 recebe o diviso
                                                            r de R4 por 10
  131 00000088 FB08 4910       MLS              R9, R8, R0, R4 ;R9 = R4 - (R8*1
                                                            0) para verificar s
                                                            e ? zero depois
  132 0000008C E7E4            B                end_of_increment
  133 0000008E         



ARM Macro Assembler    Page 4 


  134 0000008E         ; Função Check_Buttons
  135 0000008E         ; Parâmetro de entrada: Não tem
  136 0000008E         ; Parâmetro de saída: Não tem
  137 0000008E         Check_Buttons
  138 0000008E F04F 0100       MOV              R1, #2_00   ;Compara com zero
  139 00000092 B500            PUSH             {LR}
  140 00000094         
  141 00000094 F7FF FFFE       BL               PortJ_Input ; call the subrouti
                                                            ne that reads the s
                                                            tate of the keys an
                                                            d places the result
                                                             in R0
  142 00000098 B401            PUSH{R0}
  143 0000009A F000 0001       AND              R0, R0, #2_01 ;Verifica primeir
                                                            o bit do port J, co
                                                            rrespondente ao J0
  144 0000009E         
  145 0000009E B440            PUSH{R6}
  146 000000A0 F006 0601       AND              R6, R6, #2_01
  147 000000A4 42B0            CMP              R0, R6      ;compara estado ant
                                                            eior e atual
  148 000000A6 D003            BEQ              j0_not_ascending ;nao faz nada 
                                                            caso o estado se ma
                                                            nteve
  149 000000A8 428E            CMP              R6, R1      ;verifica se ? bord
                                                            a de subida, ou sej
                                                            a, se o estado ante
                                                            rior era zero
  150 000000AA D101            BNE              j0_not_ascending ; nao faz nada
                                                             caso seja borda de
                                                             descda
  151 000000AC         
  152 000000AC F000 F815       BL               Check_Button_Ascending
  153 000000B0         
  154 000000B0         j0_not_ascending
  155 000000B0 BC40            POP{R6}
  156 000000B2 EA46 0600       ORR              R6, R6, R0
  157 000000B6 B440            PUSH{R6}
  158 000000B8         
  159 000000B8 F006 0602       AND              R6, R6, #2_10
  160 000000BC BC01            POP{R0}
  161 000000BE F000 0002       AND              R0, R0, #2_10 ;Verifica segundo
                                                             bit do port J, cor
                                                            respondente ao J1
  162 000000C2         
  163 000000C2 42B0            CMP              R0, R6      ;compara estado ant
                                                            eior e atual
  164 000000C4 D003            BEQ              j1_not_ascending ;nao faz nada 
                                                            caso o estado se ma
                                                            nteve
  165 000000C6 428E            CMP              R6, R1      ;verifica se ? bord
                                                            a de subida, ou sej
                                                            a, se o estado ante
                                                            rior era zero
  166 000000C8 D101            BNE              j1_not_ascending ; nao faz nada
                                                             caso seja borda de
                                                             descda
  167 000000CA         
  168 000000CA F000 F80F       BL               Check_Button_Step



ARM Macro Assembler    Page 5 


  169 000000CE         
  170 000000CE         j1_not_ascending
  171 000000CE BC40            POP{R6}
  172 000000D0 EA46 0600       ORR              R6, R6, R0
  173 000000D4         
  174 000000D4 F85D EB04       POP              {LR}
  175 000000D8 4770            BX               LR
  176 000000DA         ;-------------------------------------------------------
                       -------------------------
  177 000000DA         ; Função Check_Button_Ascending
  178 000000DA         ; Parâmetro de entrada: Não tem
  179 000000DA         ; Parâmetro de saída: Não tem
  180 000000DA         Check_Button_Ascending
  181 000000DA F1BB 0F01       CMP              R11, #1
  182 000000DE BF08            IT               EQ
  183 000000E0 F04F 0B00       MOVEQ            R11, #0
  184 000000E4 BF18            IT               NE
  185 000000E6 F04F 0B01       MOVNE            R11, #1
  186 000000EA 4770            BX               LR
  187 000000EC         
  188 000000EC         ; Função Check_Button_Step
  189 000000EC         ; Parâmetro de entrada: Não tem
  190 000000EC         ; Parâmetro de saída: Não tem
  191 000000EC         Check_Button_Step
  192 000000EC F1BC 0F09       CMP              R12, #9
  193 000000F0 BF18            IT               NE
  194 000000F2 F10C 0C01       ADDNE            R12, R12, #1
  195 000000F6 BF08            IT               EQ
  196 000000F8 F04F 0C01       MOVEQ            R12, #1
  197 000000FC 4770            BX               LR
  198 000000FE         ; Função Show_Leds
  199 000000FE         ; Parâmetro de entrada: R4 (GENERAL COUNTER)
  200 000000FE         ; Parâmetro de saída: Não tem
  201 000000FE         Show_Leds
  202 000000FE B500            PUSH             {LR}
  203 00000100         
  204 00000100 F04F 0020       LDR              R0, = TRAN_PP5
  205 00000104 F7FF FFFE       BL               PortP_Output ;enable LEDS trans
                                                            istor
  206 00000108         
  207 00000108 4620            MOV              R0, R4
  208 0000010A F7FF FFFE       BL               PortQ_Output ;show R4 on the LE
                                                            DS
  209 0000010E F7FF FFFE       BL               PortA_Output ;show R4 on the LE
                                                            DS
  210 00000112         
  211 00000112 F04F 0001       MOV              R0, #1
  212 00000116 F7FF FFFE       BL               SysTick_Wait1ms
  213 0000011A F04F 0000       MOV              R0, #0
  214 0000011E F7FF FFFE       BL               PortP_Output ;enable LEDS trans
                                                            istor
  215 00000122         ;disable led transitor????
  216 00000122         ;MOV R0, #0 
  217 00000122         ;BL PortP_Output ;enable LEDS transistor
  218 00000122         
  219 00000122 F85D EB04       POP              {LR}
  220 00000126 4770            BX               LR
  221 00000128         ; Função Pisca_LED
  222 00000128         ; Parâmetro de entrada: Não tem



ARM Macro Assembler    Page 6 


  223 00000128         ; Parâmetro de saída: Não tem
  224 00000128         Pisca_LED
  225 00000128         ; ****************************************
  226 00000128         ; Escrever função que acende o LED, espera 1 segundo, ap
                       aga o LED e espera 1 s
  227 00000128         ; Esta função deve chamar a rotina SysTick_Wait1ms com o
                        parâmetro de entrada em R0
  228 00000128         ; ****************************************
  229 00000128         
  230 00000128         ; ------------------------------------------------------
                       --------------------------------------------------------
                       -----------
  231 00000128         ; Fim do Arquivo
  232 00000128         ; ------------------------------------------------------
                       --------------------------------------------------------
                       ----------- 
  233 00000128                 ALIGN                        ;Garante que o fim 
                                                            da seção está alinh
                                                            ada 
  234 00000128                 END                          ;Fim do arquivo
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4.fp.sp 
--depend=.\objects\main.d -o.\objects\main.o -I"C:\Users\Robson Junior\AppData\
Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129" --predefine="__EVAL
 SETA 1" --predefine="__UVISION_VERSION SETA 541" --predefine="TM4C1294NCPDT SE
TA 1" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 23 in file main.s
   Uses
      None
Comment: DATA unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 34 in file main.s
   Uses
      None
Comment: .text unused
Ascending_Order 0000005C

Symbol: Ascending_Order
   Definitions
      At line 109 in file main.s
   Uses
      At line 92 in file main.s
Comment: Ascending_Order used once
Check_Button_Ascending 000000DA

Symbol: Check_Button_Ascending
   Definitions
      At line 180 in file main.s
   Uses
      At line 152 in file main.s
Comment: Check_Button_Ascending used once
Check_Button_Step 000000EC

Symbol: Check_Button_Step
   Definitions
      At line 191 in file main.s
   Uses
      At line 168 in file main.s
Comment: Check_Button_Step used once
Check_Buttons 0000008E

Symbol: Check_Buttons
   Definitions
      At line 137 in file main.s
   Uses
      At line 94 in file main.s
Comment: Check_Buttons used once
Decrease_Order 00000074

Symbol: Decrease_Order
   Definitions
      At line 123 in file main.s
   Uses
      At line 93 in file main.s
Comment: Decrease_Order used once
MainLoop 00000034

Symbol: MainLoop
   Definitions
      At line 74 in file main.s
   Uses
      At line 103 in file main.s
Comment: MainLoop used once
Pisca_LED 00000128

Symbol: Pisca_LED



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 224 in file main.s
   Uses
      None
Comment: Pisca_LED unused
Show_Leds 000000FE

Symbol: Show_Leds
   Definitions
      At line 201 in file main.s
   Uses
      At line 84 in file main.s
Comment: Show_Leds used once
Start 00000000

Symbol: Start
   Definitions
      At line 59 in file main.s
   Uses
      At line 37 in file main.s
Comment: Start used once
end_of_increment 00000058

Symbol: end_of_increment
   Definitions
      At line 97 in file main.s
   Uses
      At line 118 in file main.s
      At line 132 in file main.s

j0_not_ascending 000000B0

Symbol: j0_not_ascending
   Definitions
      At line 154 in file main.s
   Uses
      At line 148 in file main.s
      At line 150 in file main.s

j1_not_ascending 000000CE

Symbol: j1_not_ascending
   Definitions
      At line 170 in file main.s
   Uses
      At line 164 in file main.s
      At line 166 in file main.s

update_counter 00000034

Symbol: update_counter
   Definitions
      At line 77 in file main.s
   Uses
      At line 89 in file main.s
      At line 101 in file main.s

14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

TRAN_PB4 00000010

Symbol: TRAN_PB4
   Definitions
      At line 18 in file main.s
   Uses
      None
Comment: TRAN_PB4 unused
TRAN_PB5 00000020

Symbol: TRAN_PB5
   Definitions
      At line 19 in file main.s
   Uses
      None
Comment: TRAN_PB5 unused
TRAN_PP5 00000020

Symbol: TRAN_PP5
   Definitions
      At line 17 in file main.s
   Uses
      At line 204 in file main.s
Comment: TRAN_PP5 used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

DSA_DSB_Output 00000000

Symbol: DSA_DSB_Output
   Definitions
      At line 54 in file main.s
   Uses
      At line 83 in file main.s
Comment: DSA_DSB_Output used once
DecimalTo7Seg 00000000

Symbol: DecimalTo7Seg
   Definitions
      At line 53 in file main.s
   Uses
      None
Comment: DecimalTo7Seg unused
GPIO_Init 00000000

Symbol: GPIO_Init
   Definitions
      At line 47 in file main.s
   Uses
      At line 62 in file main.s
Comment: GPIO_Init used once
PLL_Init 00000000

Symbol: PLL_Init
   Definitions
      At line 43 in file main.s
   Uses
      At line 60 in file main.s
Comment: PLL_Init used once
PortA_Output 00000000

Symbol: PortA_Output
   Definitions
      At line 50 in file main.s
   Uses
      At line 209 in file main.s
Comment: PortA_Output used once
PortB_Output 00000000

Symbol: PortB_Output
   Definitions
      At line 51 in file main.s
   Uses
      None
Comment: PortB_Output unused
PortJ_Input 00000000

Symbol: PortJ_Input
   Definitions
      At line 52 in file main.s
   Uses
      At line 141 in file main.s
Comment: PortJ_Input used once
PortP_Output 00000000

Symbol: PortP_Output



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 48 in file main.s
   Uses
      At line 205 in file main.s
      At line 214 in file main.s

PortQ_Output 00000000

Symbol: PortQ_Output
   Definitions
      At line 49 in file main.s
   Uses
      At line 208 in file main.s
Comment: PortQ_Output used once
SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 44 in file main.s
   Uses
      At line 61 in file main.s
Comment: SysTick_Init used once
SysTick_Wait1ms 00000000

Symbol: SysTick_Wait1ms
   Definitions
      At line 45 in file main.s
   Uses
      At line 212 in file main.s
Comment: SysTick_Wait1ms used once
SysTick_Wait1us 00000000

Symbol: SysTick_Wait1us
   Definitions
      At line 46 in file main.s
   Uses
      None
Comment: SysTick_Wait1us unused
12 symbols
364 symbols in table
