


ARM Macro Assembler    Page 1 


    1 00000000         ; main.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Prof. Guilherme Peron
    4 00000000         ; Ver 1 19/03/2018
    5 00000000         ; Ver 2 26/08/2018
    6 00000000         ; Este programa deve esperar o usuário pressionar uma ch
                       ave.
    7 00000000         ; Caso o usuário pressione uma chave, um LED deve piscar
                        a cada 1 segundo.
    8 00000000         
    9 00000000         ; ------------------------------------------------------
                       -------------------------
   10 00000000                 THUMB                        ; Instruções do tip
                                                            o Thumb-2
   11 00000000         ; ------------------------------------------------------
                       -------------------------
   12 00000000         
   13 00000000         ; Declarações EQU - Defines
   14 00000000         ;<NOME>         EQU <VALOR>
   15 00000000         ; ========================
   16 00000000         ; Definições de Valores
   17 00000000 00000020 
                       TRAN_PP5
                               EQU              2_00100000
   18 00000000 00000010 
                       TRAN_PB4
                               EQU              2_00010000
   19 00000000 00000020 
                       TRAN_PB5
                               EQU              2_00100000
   20 00000000         
   21 00000000         ; ------------------------------------------------------
                       -------------------------
   22 00000000         ; Área de Dados - Declarações de variáveis
   23 00000000                 AREA             DATA, ALIGN=2
   24 00000000         ; Se alguma variável for chamada em outro arquivo
   25 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       riável <var> a 
   26 00000000         ; partir de outro arquivo
   27 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       variável de nome <var>
   28 00000000         ; de <tam> bytes a partir da primeira 
   29 00000000         ; posição da RAM  
   30 00000000         
   31 00000000         ; ------------------------------------------------------
                       -------------------------
   32 00000000         ; Área de Código - Tudo abaixo da diretiva a seguir será
                        armazenado na memória de 
   33 00000000         ;                  código
   34 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   35 00000000         
   36 00000000         ; Se alguma função do arquivo for chamada em outro arqui
                       vo 
   37 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            função Start a part
                                                            ir de 
   38 00000000         ; outro arquivo. No caso startup.s
   39 00000000         



ARM Macro Assembler    Page 2 


   40 00000000         ; Se chamar alguma função externa 
   41 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   42 00000000         ; função <func>
   43 00000000                 IMPORT           PLL_Init
   44 00000000                 IMPORT           SysTick_Init
   45 00000000                 IMPORT           SysTick_Wait1ms
   46 00000000                 IMPORT           SysTick_Wait1us
   47 00000000                 IMPORT           GPIO_Init
   48 00000000                 IMPORT           PortP_Output
   49 00000000                 IMPORT           PortQ_Output
   50 00000000                 IMPORT           PortA_Output
   51 00000000                 IMPORT           PortB_Output
   52 00000000                 IMPORT           PortJ_Input
   53 00000000                 IMPORT           DecimalTo7Seg
   54 00000000                 IMPORT           DSA_DSB_Output
   55 00000000         
   56 00000000         
   57 00000000         ; ------------------------------------------------------
                       -------------------------
   58 00000000         ; Função main()
   59 00000000         Start
   60 00000000 F7FF FFFE       BL               PLL_Init    ;Chama a subrotina 
                                                            para alterar o cloc
                                                            k do microcontrolad
                                                            or para 80MHz
   61 00000004 F7FF FFFE       BL               SysTick_Init ;Chama a subrotina
                                                             para inicializar o
                                                             SysTick
   62 00000008 F7FF FFFE       BL               GPIO_Init   ;Chama a subrotina 
                                                            que inicializa os G
                                                            PIO
   63 0000000C         
   64 0000000C F04F 0000       MOV              R0, #0      ; function paramete
                                                            r
   65 00000010 F04F 0100       MOV              R1, #0      ; function paramete
                                                            r
   66 00000014 F04F 0700       MOV              R7, #0      ;couter_update_disp
                                                            
   67 00000018 F44F 73FA       LDR              R3, =500    ; max update dis
   68 0000001C F04F 0800       MOV              R8, #0      ; decimal dig 1
   69 00000020 F04F 0900       MOV              R9, #0      ; decimal dig 2
   70 00000024 F04F 0B01       MOV              R11, #1     ; ascending
   71 00000028 F04F 0C01       MOV              R12, #1     ; step
   72 0000002C F04F 0400       MOV              R4, #0      ; general_counter [
                                                            0 - 99]
   73 00000030         MainLoop
   74 00000030         ; ****************************************
   75 00000030         
   76 00000030         update_counter
   77 00000030         ;Configura display A, B
   78 00000030 4648            MOV              R0, R9
   79 00000032 4641            MOV              R1, R8
   80 00000034         
   81 00000034         ;Mostra valores de R0 e R1 nos display DS1 e DS2, respec
                       tivamente
   82 00000034 F7FF FFFE       BL               DSA_DSB_Output
   83 00000038 F000 F83D       BL               Show_Leds
   84 0000003C         ;Contador para esperar 1s



ARM Macro Assembler    Page 3 


   85 0000003C F107 0701       ADD              R7, R7, #1
   86 00000040 429F            CMP              R7, R3
   87 00000042         
   88 00000042 D1F5            BNE              update_counter ; increase the c
                                                            ounter or not
   89 00000044 F1BB 0F01       CMP              R11, #1     ;ASCENDING ORDER?
   90 00000048 D004            BEQ              Ascending_Order
   91 0000004A D10F            BNE              Decrease_Order
   92 0000004C         
   93 0000004C         
   94 0000004C         
   95 0000004C         end_of_increment
   96 0000004C         
   97 0000004C F000 F81B       BL               Check_Buttons
   98 00000050         
   99 00000050 E7EE            B                update_counter
  100 00000052         ; ****************************************
  101 00000052 E7ED            B                MainLoop
  102 00000054         
  103 00000054         ;-------------------------------------------------------
                       -------------------------
  104 00000054         ; Função Ascending_Order  
  105 00000054         ; Parâmetro de entrada: R11 (COUNTER)
  106 00000054         ; Parâmetro de saída: R9, R8
  107 00000054         Ascending_Order
  108 00000054 2C63            CMP              R4, #99     ; counter == 0
  109 00000056 BF08            IT               EQ
  110 00000058 2400            MOVEQ            R4, #0      ;reset counter
  111 0000005A BF18            IT               NE
  112 0000005C 4464            ADDNE            R4, R12     ;counter+=step
  113 0000005E F04F 000A       MOV              R0, #10
  114 00000062 FBB1 F8F0       UDIV             R8, R1, R0  ;R8 recebe o diviso
                                                            r de R4 por 10
  115 00000066 FB08 4910       MLS              R9, R8, R0, R4 ;R9 = R4 - (R8*1
                                                            0) para verificar s
                                                            e ? zero depois
  116 0000006A E7EF            B                end_of_increment
  117 0000006C         ;-------------------------------------------------------
                       -------------------------
  118 0000006C         ; Função Decrease_Order
  119 0000006C         ; Parâmetro de entrada: R11 (COUNTER)
  120 0000006C         ; Parâmetro de saída: R9, R8
  121 0000006C         Decrease_Order
  122 0000006C 2C00            CMP              R4, #0      ; counter == 0
  123 0000006E BF08            IT               EQ
  124 00000070 2463            MOVEQ            R4, #99     ;reset counter
  125 00000072 BF18            IT               NE
  126 00000074 EBA4 040C       SUBNE            R4, R12     ;counter-=step
  127 00000078 F04F 000A       MOV              R0, #10
  128 0000007C FBB1 F8F0       UDIV             R8, R1, R0  ;R8 recebe o diviso
                                                            r de R4 por 10
  129 00000080 FB08 4910       MLS              R9, R8, R0, R4 ;R9 = R4 - (R8*1
                                                            0) para verificar s
                                                            e ? zero depois
  130 00000084 E7E2            B                end_of_increment
  131 00000086         
  132 00000086         ; Função Check_Buttons
  133 00000086         ; Parâmetro de entrada: Não tem
  134 00000086         ; Parâmetro de saída: Não tem



ARM Macro Assembler    Page 4 


  135 00000086         Check_Buttons
  136 00000086 B500            PUSH             {LR}
  137 00000088         
  138 00000088 F7FF FFFE       BL               PortJ_Input ; call the subrouti
                                                            ne that reads the s
                                                            tate of the keys an
                                                            d places the result
                                                             in R0
  139 0000008C 4605            MOV              R5, R0
  140 0000008E EA4F 75C5       LSL              R5, #31
  141 00000092         
  142 00000092 F85D EB04       POP              {LR}
  143 00000096 4770            BX               LR
  144 00000098         ;-------------------------------------------------------
                       -------------------------
  145 00000098         ; Função Check_Button_Ascending
  146 00000098         ; Parâmetro de entrada: Não tem
  147 00000098         ; Parâmetro de saída: Não tem
  148 00000098         Check_Button_Ascending
  149 00000098 2C01            CMP              R4, #1
  150 0000009A BF08            IT               EQ
  151 0000009C 2400            MOVEQ            R4, #0
  152 0000009E BF18            IT               NE
  153 000000A0 2401            MOVNE            R4, #1
  154 000000A2 4770            BX               LR
  155 000000A4         
  156 000000A4         ; Função Check_Button_Step
  157 000000A4         ; Parâmetro de entrada: Não tem
  158 000000A4         ; Parâmetro de saída: Não tem
  159 000000A4         Check_Button_Step
  160 000000A4 F1BC 0F09       CMP              R12, #9
  161 000000A8 BF18            IT               NE
  162 000000AA F10C 0C01       ADDNE            R12, R12, #1
  163 000000AE BF08            IT               EQ
  164 000000B0 F04F 0C01       MOVEQ            R12, #1
  165 000000B4 4770            BX               LR
  166 000000B6         ; Função Show_Leds
  167 000000B6         ; Parâmetro de entrada: R4 (GENERAL COUNTER)
  168 000000B6         ; Parâmetro de saída: Não tem
  169 000000B6         Show_Leds
  170 000000B6 B500            PUSH             {LR}
  171 000000B8         
  172 000000B8 F04F 0020       LDR              R0, = TRAN_PP5
  173 000000BC F7FF FFFE       BL               PortP_Output ;enable LEDS trans
                                                            istor
  174 000000C0         
  175 000000C0 4620            MOV              R0, R4
  176 000000C2 F7FF FFFE       BL               PortQ_Output ;show R4 on the LE
                                                            DS
  177 000000C6 F7FF FFFE       BL               PortA_Output ;show R4 on the LE
                                                            DS
  178 000000CA         
  179 000000CA F04F 0001       MOV              R0, #1
  180 000000CE F7FF FFFE       BL               SysTick_Wait1ms
  181 000000D2         
  182 000000D2         ;disable led transitor????
  183 000000D2         ;MOV R0, #0 
  184 000000D2         ;BL PortP_Output ;enable LEDS transistor
  185 000000D2         



ARM Macro Assembler    Page 5 


  186 000000D2 F85D EB04       POP              {LR}
  187 000000D6 4770            BX               LR
  188 000000D8         ; Função Pisca_LED
  189 000000D8         ; Parâmetro de entrada: Não tem
  190 000000D8         ; Parâmetro de saída: Não tem
  191 000000D8         Pisca_LED
  192 000000D8         ; ****************************************
  193 000000D8         ; Escrever função que acende o LED, espera 1 segundo, ap
                       aga o LED e espera 1 s
  194 000000D8         ; Esta função deve chamar a rotina SysTick_Wait1ms com o
                        parâmetro de entrada em R0
  195 000000D8         ; ****************************************
  196 000000D8         
  197 000000D8         ; ------------------------------------------------------
                       --------------------------------------------------------
                       -----------
  198 000000D8         ; Fim do Arquivo
  199 000000D8         ; ------------------------------------------------------
                       --------------------------------------------------------
                       ----------- 
  200 000000D8                 ALIGN                        ;Garante que o fim 
                                                            da seção está alinh
                                                            ada 
  201 000000D8                 END                          ;Fim do arquivo
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4.fp.sp 
--depend=.\objects\main.d -o.\objects\main.o -I"C:\Users\Robson Junior\AppData\
Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129" --predefine="__EVAL
 SETA 1" --predefine="__UVISION_VERSION SETA 541" --predefine="TM4C1294NCPDT SE
TA 1" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 23 in file main.s
   Uses
      None
Comment: DATA unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 34 in file main.s
   Uses
      None
Comment: .text unused
Ascending_Order 00000054

Symbol: Ascending_Order
   Definitions
      At line 107 in file main.s
   Uses
      At line 90 in file main.s
Comment: Ascending_Order used once
Check_Button_Ascending 00000098

Symbol: Check_Button_Ascending
   Definitions
      At line 148 in file main.s
   Uses
      None
Comment: Check_Button_Ascending unused
Check_Button_Step 000000A4

Symbol: Check_Button_Step
   Definitions
      At line 159 in file main.s
   Uses
      None
Comment: Check_Button_Step unused
Check_Buttons 00000086

Symbol: Check_Buttons
   Definitions
      At line 135 in file main.s
   Uses
      At line 97 in file main.s
Comment: Check_Buttons used once
Decrease_Order 0000006C

Symbol: Decrease_Order
   Definitions
      At line 121 in file main.s
   Uses
      At line 91 in file main.s
Comment: Decrease_Order used once
MainLoop 00000030

Symbol: MainLoop
   Definitions
      At line 73 in file main.s
   Uses
      At line 101 in file main.s
Comment: MainLoop used once
Pisca_LED 000000D8

Symbol: Pisca_LED



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 191 in file main.s
   Uses
      None
Comment: Pisca_LED unused
Show_Leds 000000B6

Symbol: Show_Leds
   Definitions
      At line 169 in file main.s
   Uses
      At line 83 in file main.s
Comment: Show_Leds used once
Start 00000000

Symbol: Start
   Definitions
      At line 59 in file main.s
   Uses
      At line 37 in file main.s
Comment: Start used once
end_of_increment 0000004C

Symbol: end_of_increment
   Definitions
      At line 95 in file main.s
   Uses
      At line 116 in file main.s
      At line 130 in file main.s

update_counter 00000030

Symbol: update_counter
   Definitions
      At line 76 in file main.s
   Uses
      At line 88 in file main.s
      At line 99 in file main.s

12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

TRAN_PB4 00000010

Symbol: TRAN_PB4
   Definitions
      At line 18 in file main.s
   Uses
      None
Comment: TRAN_PB4 unused
TRAN_PB5 00000020

Symbol: TRAN_PB5
   Definitions
      At line 19 in file main.s
   Uses
      None
Comment: TRAN_PB5 unused
TRAN_PP5 00000020

Symbol: TRAN_PP5
   Definitions
      At line 17 in file main.s
   Uses
      At line 172 in file main.s
Comment: TRAN_PP5 used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

DSA_DSB_Output 00000000

Symbol: DSA_DSB_Output
   Definitions
      At line 54 in file main.s
   Uses
      At line 82 in file main.s
Comment: DSA_DSB_Output used once
DecimalTo7Seg 00000000

Symbol: DecimalTo7Seg
   Definitions
      At line 53 in file main.s
   Uses
      None
Comment: DecimalTo7Seg unused
GPIO_Init 00000000

Symbol: GPIO_Init
   Definitions
      At line 47 in file main.s
   Uses
      At line 62 in file main.s
Comment: GPIO_Init used once
PLL_Init 00000000

Symbol: PLL_Init
   Definitions
      At line 43 in file main.s
   Uses
      At line 60 in file main.s
Comment: PLL_Init used once
PortA_Output 00000000

Symbol: PortA_Output
   Definitions
      At line 50 in file main.s
   Uses
      At line 177 in file main.s
Comment: PortA_Output used once
PortB_Output 00000000

Symbol: PortB_Output
   Definitions
      At line 51 in file main.s
   Uses
      None
Comment: PortB_Output unused
PortJ_Input 00000000

Symbol: PortJ_Input
   Definitions
      At line 52 in file main.s
   Uses
      At line 138 in file main.s
Comment: PortJ_Input used once
PortP_Output 00000000

Symbol: PortP_Output



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 48 in file main.s
   Uses
      At line 173 in file main.s
Comment: PortP_Output used once
PortQ_Output 00000000

Symbol: PortQ_Output
   Definitions
      At line 49 in file main.s
   Uses
      At line 176 in file main.s
Comment: PortQ_Output used once
SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 44 in file main.s
   Uses
      At line 61 in file main.s
Comment: SysTick_Init used once
SysTick_Wait1ms 00000000

Symbol: SysTick_Wait1ms
   Definitions
      At line 45 in file main.s
   Uses
      At line 180 in file main.s
Comment: SysTick_Wait1ms used once
SysTick_Wait1us 00000000

Symbol: SysTick_Wait1us
   Definitions
      At line 46 in file main.s
   Uses
      None
Comment: SysTick_Wait1us unused
12 symbols
362 symbols in table
