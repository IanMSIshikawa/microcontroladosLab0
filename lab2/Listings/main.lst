


ARM Macro Assembler    Page 1 


    1 00000000         ; main.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Prof. Guilherme Peron
    4 00000000         ; Ver 1 19/03/2018
    5 00000000         ; Ver 2 26/08/2018
    6 00000000         ; Este programa deve esperar o usu�rio pressionar uma 
                       chave.
    7 00000000         ; Caso o usu�rio pressione uma chave, um LED deve pisc
                       ar a cada 1 segundo.
    8 00000000         
    9 00000000         ; ------------------------------------------------------
                       -------------------------
   10 00000000                 THUMB                        ; Instru��es do
                                                             tipo Thumb-2
   11 00000000         ; ------------------------------------------------------
                       -------------------------
   12 00000000         
   13 00000000         ; Declara��es EQU - Defines
   14 00000000         ;<NOME>         EQU <VALOR>
   15 00000000         ; ========================
   16 00000000         ; Defini��es de Valores
   17 00000000         ;=======
   18 00000000         ; Defini��es de Valores
   19 00000000 20000A08 
                       ACENDE_LED
                               EQU              0x20000A08
   20 00000000 20000A04 
                       TOGGLE_LED
                               EQU              0x20000A04
   21 00000000 20000A00 
                       RESET_SW
                               EQU              0x20000A00
   22 00000000         
   23 00000000         
   24 00000000         
   25 00000000         ; ------------------------------------------------------
                       -------------------------
   26 00000000         ; �rea de Dados - Declara��es de vari�veis
   27 00000000                 AREA             DATA, ALIGN=2
   28 00000000         ; Se alguma vari�vel for chamada em outro arquivo
   29 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       ri�vel <var> a 
   30 00000000         ; partir de outro arquivo
   31 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       vari�vel de nome <var>
   32 00000000         ; de <tam> bytes a partir da primeira 
   33 00000000         ; posi��o da RAM  
   34 00000000         ;=======
   35 00000000         ; posi��o da RAM 
   36 00000000         
   37 00000000         ; ------------------------------------------------------
                       -------------------------
   38 00000000         ; �rea de C�digo - Tudo abaixo da diretiva a seguir 
                       ser� armazenado na mem�ria de 
   39 00000000         ;                  c�digo
   40 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   41 00000000         
   42 00000000         ; Se alguma fun��o do arquivo for chamada em outro a



ARM Macro Assembler    Page 2 


                       rquivo 
   43 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            fun��o Start a 
                                                            partir de 
   44 00000000         ; outro arquivo. No caso startup.s
   45 00000000         
   46 00000000         ; Se chamar alguma fun��o externa 
   47 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   48 00000000         ; fun��o <func>
   49 00000000         
   50 00000000                 IMPORT           PLL_Init
   51 00000000                 IMPORT           SysTick_Init
   52 00000000                 IMPORT           SysTick_Wait1ms
   53 00000000                 IMPORT           LCD_Init    ; Permite chamar GP
                                                            IO_Init de outro ar
                                                            quivo
   54 00000000                 IMPORT           setup_LCD   ; Configuração do
                                                             LCD
   55 00000000                 IMPORT           send_comand_lcd
   56 00000000                 IMPORT           send_complex_comand_lcd
   57 00000000                 IMPORT           send_data_lcd
   58 00000000                 IMPORT           send_string_lcd
   59 00000000         
   60 00000000         
   61 00000000                 IMPORT           GPIO_Init
   62 00000000         ;IMPORT  PortN_Output
   63 00000000                 IMPORT           PortJ_Input
   64 00000000                 IMPORT           PortQ_Output
   65 00000000                 IMPORT           PortA_Output
   66 00000000                 IMPORT           PortP_Output
   67 00000000                 IMPORT           PortM_Output_Teclado
   68 00000000                 IMPORT           PortM_Output_LCD
   69 00000000                 IMPORT           PortL_Input
   70 00000000         
   71 00000000         
   72 00000000         ; ------------------------------------------------------
                       -------------------------
   73 00000000         ; Fun��o main()
   74 00000000         Start
   75 00000000 F7FF FFFE       BL               PLL_Init    ;Chama a subrotina 
                                                            para alterar o cloc
                                                            k do microcontrolad
                                                            or para 80MHz
   76 00000004 F7FF FFFE       BL               SysTick_Init ;Chama a subrotina
                                                             para inicializar o
                                                             SysTick
   77 00000008 F7FF FFFE       BL               GPIO_Init
   78 0000000C F7FF FFFE       BL               LCD_Init
   79 00000010 F7FF FFFE       BL               setup_LCD
   80 00000014         
   81 00000014 F04F 0061       MOV              R0, #97
   82 00000018 F7FF FFFE       BL               send_data_lcd
   83 0000001C         
   84 0000001C         
   85 0000001C         LimpaREGS_Tela_LEDS
   86 0000001C         
   87 0000001C F04F 0000       MOV              R0,#0
   88 00000020 F04F 0400       MOV              R4,#0       ; usado em Varredur



ARM Macro Assembler    Page 3 


                                                            a
   89 00000024 F04F 0600       MOV              R6,#0       ;R6 = base multipli
                                                            cac�o
   90 00000028 F04F 0700       MOV              R7,#0       ;R7 = estado multip
                                                            licador
   91 0000002C F04F 0800       MOV              R8,#0       ;R8 = nova tecla de
                                                            tectada
   92 00000030 F04F 0900       MOV              R9,#0       ;R9 = tecla contage
                                                            m debounce
   93 00000034 F04F 0A00       MOV              R10,#0      ;R10= n estados deb
                                                            ounce
   94 00000038         
   95 00000038 483F            LDR              R0,=RESET_SW
   96 0000003A F04F 0100       MOV              R1,#0
   97 0000003E 6001            STR              R1,[R0]
   98 00000040 F04F 0000       MOV              R0,#0
   99 00000044 F04F 0100       MOV              R1,#0
  100 00000048         
  101 00000048         
  102 00000048         MainLoop
  103 00000048         
  104 00000048 F000 F85B       BL               faz_Varredura
  105 0000004C         
  106 0000004C 483A            LDR              R0,=RESET_SW
  107 0000004E 6800            LDR              R0,[R0]
  108 00000050 2801            CMP              R0,#1
  109 00000052 BF08            IT               EQ
  110 00000054 E7E2            BEQ              LimpaREGS_Tela_LEDS
  111 00000056         
  112 00000056 F000 F807       BL               AscendeLed
  113 0000005A F04F 0001       MOV              R0, #0x01
  114 0000005E F7FF FFFE       BL               send_complex_comand_lcd
  115 00000062 F7FF FFFE       BL               send_string_lcd
  116 00000066         
  117 00000066 E7EF            B                MainLoop
  118 00000068         
  119 00000068         ;-------------------------------------------------------
                       -------------------------
  120 00000068         ; Fun��o Pisca_LED
  121 00000068         ; Par�metro de entrada: N�o tem
  122 00000068         ; Par�metro de sa�da: N�o tem
  123 00000068         Pisca_LED
  124 00000068         ; Fun��o Pisca_LED
  125 00000068         ; Par�metro de entrada: N�o tem
  126 00000068         ; Par�metro de sa�da: N�o tem
  127 00000068         AscendeLed
  128 00000068         ; ****************************************
  129 00000068         ; Escrever fun��o que acende o LED, espera 1 segundo
                       , apaga o LED e espera 1 s
  130 00000068         ; Esta fun��o deve chamar a rotina SysTick_Wait1ms c
                       om o par�metro de entrada em R0
  131 00000068         ; ****************************************
  132 00000068 B500            PUSH{LR}
  133 0000006A         
  134 0000006A 4630            MOV              R0,R6       ;#2_00001111
  135 0000006C         ;MOV R0,#3
  136 0000006C F7FF FFFE       BL               PortQ_Output
  137 00000070 4630            MOV              R0,R6       ;#2_11110000
  138 00000072 F7FF FFFE       BL               PortA_Output



ARM Macro Assembler    Page 4 


  139 00000076 F04F 00FF       MOV              R0,#2_11111111
  140 0000007A F7FF FFFE       BL               PortP_Output
  141 0000007E F85D EB04       POP{LR}
  142 00000082         
  143 00000082 4770            BX               LR
  144 00000084         
  145 00000084         Varredura
  146 00000084 B500            PUSH{LR}
  147 00000086 F04F 0800       MOV              R8,#0
  148 0000008A F04F 0310       MOV              R3,#2_00010000
  149 0000008E F04F 0501       MOV              R5,#1
  150 00000092         
  151 00000092         Varredura_loop
  152 00000092 F083 00FF       EOR              R0,R3,#2_11111111 ; inverter bi
                                                            ts ligados
  153 00000096         
  154 00000096 F7FF FFFE       BL               PortM_Output_Teclado
  155 0000009A F7FF FFFE       BL               PortL_Input
  156 0000009E         
  157 0000009E F04F 04FF       MOV              R4,#2_11111111
  158 000000A2         
  159 000000A2 F080 000F       EOR              R0,R0,#2_1111 ; inverter bits l
                                                            igados
  160 000000A6         
  161 000000A6 2801            CMP              R0, #2_00000001
  162 000000A8 BF08            IT               EQ
  163 000000AA 2400            MOVEQ            R4,#0
  164 000000AC         
  165 000000AC 2802            CMP              R0, #2_00000010
  166 000000AE BF08            IT               EQ
  167 000000B0 2403            MOVEQ            R4,#3
  168 000000B2         
  169 000000B2 2804            CMP              R0, #2_00000100
  170 000000B4 BF08            IT               EQ
  171 000000B6 2406            MOVEQ            R4,#6
  172 000000B8         
  173 000000B8 2808            CMP              R0, #2_00001000
  174 000000BA BF08            IT               EQ
  175 000000BC 2409            MOVEQ            R4,#9
  176 000000BE         
  177 000000BE 2CFF            CMP              R4,#2_11111111
  178 000000C0 BF1C            ITT              NE
  179 000000C2 1964            ADDNE            R4,R4,R5
  180 000000C4 E008            BNE              Debounce_TRUE
  181 000000C6         
  182 000000C6 F105 0501       ADD              R5,R5,#1
  183 000000CA EA4F 0343       LSL              R3,R3,#1
  184 000000CE 2B80            CMP              R3, #2_10000000
  185 000000D0 D1DF            BNE              Varredura_loop
  186 000000D2         
  187 000000D2         
  188 000000D2         
  189 000000D2         SaidaVarredura
  190 000000D2         
  191 000000D2         ; CMP R4,#2_11111111
  192 000000D2         ; IT NE
  193 000000D2         ;  BNE Debounce_TRUE
  194 000000D2         
  195 000000D2         Saida_deb



ARM Macro Assembler    Page 5 


  196 000000D2         
  197 000000D2 F85D EB04       POP{LR}
  198 000000D6 4770            BX               LR
  199 000000D8         
  200 000000D8         Debounce_TRUE
  201 000000D8         
  202 000000D8 2C0B            CMP              R4, #11
  203 000000DA BF08            IT               EQ
  204 000000DC 2400            MOVEQ            R4,#0       ; zerar R4 >=10
  205 000000DE         
  206 000000DE 2C0A            CMP              R4, #10
  207 000000E0 BF28            IT               HS
  208 000000E2 E7F6            BHS              Saida_deb   ; sair >=10
  209 000000E4         
  210 000000E4 454C            CMP              R4, R9      ; R4 = nova tecla a
                                                            pertada ; R9 = tecl
                                                            a contagem debounce
                                                             ;R10= n estados de
                                                            bounce
  211 000000E6 BF0E            ITEE             EQ
  212 000000E8 F10A 0A01       ADDEQ            R10,R10,#1
  213 000000EC F04F 0A00       MOVNE            R10,#0
  214 000000F0 46A1            MOVNE            R9,R4
  215 000000F2         
  216 000000F2 F1BA 0F0A       CMP              R10,#10
  217 000000F6 BF04            ITT              EQ
  218 000000F8 F04F 0A00       MOVEQ            R10,#0
  219 000000FC F04F 0801       MOVEQ            R8,#1
  220 00000100         ;B   Saida_deb 
  221 00000100         
  222 00000100         
  223 00000100         ;BNE Varredura
  224 00000100 E7E7            B                Saida_deb
  225 00000102         
  226 00000102         faz_Varredura
  227 00000102 B500            PUSH{LR}
  228 00000104         
  229 00000104         repete
  230 00000104 F7FF FFBE       BL               Varredura
  231 00000108 F04F 0001       mov              R0,#1
  232 0000010C         ;BL Sys-Tick_Wait1ms
  233 0000010C 480A            LDR              R0,=RESET_SW
  234 0000010E 6800            LDR              R0,[R0]
  235 00000110 2801            CMP              R0,#1
  236 00000112 BF08            IT               EQ
  237 00000114 E00D            BEQ              saida
  238 00000116         
  239 00000116 F1B8 0F01       CMP              R8,#1
  240 0000011A         ;IT NE
  241 0000011A         ;BNE repete
  242 0000011A BF18            IT               NE
  243 0000011C E009            BNE              saida
  244 0000011E 45B1            CMP              R9,R6
  245 00000120 BF1E            ITTT             NE
  246 00000122 464E            MOVNE            R6,R9
  247 00000124 2700            MOVNE            R7,#0
  248 00000126 E004            BNE              saida
  249 00000128 F107 0701       ADD              R7,#1
  250 0000012C 2F0A            CMP              R7,#10



ARM Macro Assembler    Page 6 


  251 0000012E BF28            IT               HS
  252 00000130 2700            MOVHS            R7,#0
  253 00000132         
  254 00000132         saida
  255 00000132         
  256 00000132 F85D EB04       POP{LR}
  257 00000136 4770            BX               LR
  258 00000138         
  259 00000138         
  260 00000138         ; ------------------------------------------------------
                       --------------------------------------------------------
                       -----------
  261 00000138         ; Fim do Arquivo
  262 00000138         ; ------------------------------------------------------
                       --------------------------------------------------------
                       ----------- 
  263 00000138                 ALIGN                        ;Garante que o fim 
                                                            da se��o est�
                                                             alinhada 
  264 00000138                 END                          ;Fim do arquivo
              20000A00 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4.fp.sp 
--depend=.\objects\main.d -o.\objects\main.o -IC:\Users\IanIshikawa\AppData\Loc
al\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 --predefine="__EVAL SET
A 1" --predefine="__UVISION_VERSION SETA 541" --predefine="TM4C1294NCPDT SETA 1
" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 27 in file main.s
   Uses
      None
Comment: DATA unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 40 in file main.s
   Uses
      None
Comment: .text unused
AscendeLed 00000068

Symbol: AscendeLed
   Definitions
      At line 127 in file main.s
   Uses
      At line 112 in file main.s
Comment: AscendeLed used once
Debounce_TRUE 000000D8

Symbol: Debounce_TRUE
   Definitions
      At line 200 in file main.s
   Uses
      At line 180 in file main.s
Comment: Debounce_TRUE used once
LimpaREGS_Tela_LEDS 0000001C

Symbol: LimpaREGS_Tela_LEDS
   Definitions
      At line 85 in file main.s
   Uses
      At line 110 in file main.s
Comment: LimpaREGS_Tela_LEDS used once
MainLoop 00000048

Symbol: MainLoop
   Definitions
      At line 102 in file main.s
   Uses
      At line 117 in file main.s
Comment: MainLoop used once
Pisca_LED 00000068

Symbol: Pisca_LED
   Definitions
      At line 123 in file main.s
   Uses
      None
Comment: Pisca_LED unused
SaidaVarredura 000000D2

Symbol: SaidaVarredura
   Definitions
      At line 189 in file main.s
   Uses
      None
Comment: SaidaVarredura unused
Saida_deb 000000D2

Symbol: Saida_deb



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 195 in file main.s
   Uses
      At line 208 in file main.s
      At line 224 in file main.s

Start 00000000

Symbol: Start
   Definitions
      At line 74 in file main.s
   Uses
      At line 43 in file main.s
Comment: Start used once
Varredura 00000084

Symbol: Varredura
   Definitions
      At line 145 in file main.s
   Uses
      At line 230 in file main.s
Comment: Varredura used once
Varredura_loop 00000092

Symbol: Varredura_loop
   Definitions
      At line 151 in file main.s
   Uses
      At line 185 in file main.s
Comment: Varredura_loop used once
faz_Varredura 00000102

Symbol: faz_Varredura
   Definitions
      At line 226 in file main.s
   Uses
      At line 104 in file main.s
Comment: faz_Varredura used once
repete 00000104

Symbol: repete
   Definitions
      At line 229 in file main.s
   Uses
      None
Comment: repete unused
saida 00000132

Symbol: saida
   Definitions
      At line 254 in file main.s
   Uses
      At line 237 in file main.s
      At line 243 in file main.s
      At line 248 in file main.s

14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ACENDE_LED 20000A08

Symbol: ACENDE_LED
   Definitions
      At line 19 in file main.s
   Uses
      None
Comment: ACENDE_LED unused
RESET_SW 20000A00

Symbol: RESET_SW
   Definitions
      At line 21 in file main.s
   Uses
      At line 95 in file main.s
      At line 106 in file main.s
      At line 233 in file main.s

TOGGLE_LED 20000A04

Symbol: TOGGLE_LED
   Definitions
      At line 20 in file main.s
   Uses
      None
Comment: TOGGLE_LED unused
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

GPIO_Init 00000000

Symbol: GPIO_Init
   Definitions
      At line 61 in file main.s
   Uses
      At line 77 in file main.s
Comment: GPIO_Init used once
LCD_Init 00000000

Symbol: LCD_Init
   Definitions
      At line 53 in file main.s
   Uses
      At line 78 in file main.s
Comment: LCD_Init used once
PLL_Init 00000000

Symbol: PLL_Init
   Definitions
      At line 50 in file main.s
   Uses
      At line 75 in file main.s
Comment: PLL_Init used once
PortA_Output 00000000

Symbol: PortA_Output
   Definitions
      At line 65 in file main.s
   Uses
      At line 138 in file main.s
Comment: PortA_Output used once
PortJ_Input 00000000

Symbol: PortJ_Input
   Definitions
      At line 63 in file main.s
   Uses
      None
Comment: PortJ_Input unused
PortL_Input 00000000

Symbol: PortL_Input
   Definitions
      At line 69 in file main.s
   Uses
      At line 155 in file main.s
Comment: PortL_Input used once
PortM_Output_LCD 00000000

Symbol: PortM_Output_LCD
   Definitions
      At line 68 in file main.s
   Uses
      None
Comment: PortM_Output_LCD unused
PortM_Output_Teclado 00000000

Symbol: PortM_Output_Teclado



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 67 in file main.s
   Uses
      At line 154 in file main.s
Comment: PortM_Output_Teclado used once
PortP_Output 00000000

Symbol: PortP_Output
   Definitions
      At line 66 in file main.s
   Uses
      At line 140 in file main.s
Comment: PortP_Output used once
PortQ_Output 00000000

Symbol: PortQ_Output
   Definitions
      At line 64 in file main.s
   Uses
      At line 136 in file main.s
Comment: PortQ_Output used once
SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 51 in file main.s
   Uses
      At line 76 in file main.s
Comment: SysTick_Init used once
SysTick_Wait1ms 00000000

Symbol: SysTick_Wait1ms
   Definitions
      At line 52 in file main.s
   Uses
      None
Comment: SysTick_Wait1ms unused
send_comand_lcd 00000000

Symbol: send_comand_lcd
   Definitions
      At line 55 in file main.s
   Uses
      None
Comment: send_comand_lcd unused
send_complex_comand_lcd 00000000

Symbol: send_complex_comand_lcd
   Definitions
      At line 56 in file main.s
   Uses
      At line 114 in file main.s
Comment: send_complex_comand_lcd used once
send_data_lcd 00000000

Symbol: send_data_lcd
   Definitions
      At line 57 in file main.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

      At line 82 in file main.s
Comment: send_data_lcd used once
send_string_lcd 00000000

Symbol: send_string_lcd
   Definitions
      At line 58 in file main.s
   Uses
      At line 115 in file main.s
Comment: send_string_lcd used once
setup_LCD 00000000

Symbol: setup_LCD
   Definitions
      At line 54 in file main.s
   Uses
      At line 79 in file main.s
Comment: setup_LCD used once
17 symbols
371 symbols in table
