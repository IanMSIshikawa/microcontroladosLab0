


ARM Macro Assembler    Page 1 


    1 00000000         ; main.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Prof. Guilherme Peron
    4 00000000         ; Ver 1 19/03/2018
    5 00000000         ; Ver 2 26/08/2018
    6 00000000         ; Este programa deve esperar o usuï¿½rio pressionar uma 
                       chave.
    7 00000000         ; Caso o usuï¿½rio pressione uma chave, um LED deve pisc
                       ar a cada 1 segundo.
    8 00000000         
    9 00000000         ; ------------------------------------------------------
                       -------------------------
   10 00000000                 THUMB                        ; Instruï¿½ï¿½es do
                                                             tipo Thumb-2
   11 00000000         ; ------------------------------------------------------
                       -------------------------
   12 00000000         
   13 00000000         ; Declara½ï¿½es EQU - Defines
   14 00000000         ;<NOME>         EQU <VALOR>
   15 00000000         ; ========================
   16 00000000         ; Definiï¿½ï¿½es de Valores
   17 00000000         ;=======
   18 00000000         ; Definições de Valores
   19 00000000 20000A08 
                       ACENDE_LED
                               EQU              0x20000A08
   20 00000000 20000A04 
                       TOGGLE_LED
                               EQU              0x20000A04
   21 00000000 20000A00 
                       RESET_SW
                               EQU              0x20000A00
   22 00000000         
   23 00000000         
   24 00000000         
   25 00000000         ; ------------------------------------------------------
                       -------------------------
   26 00000000         ; ï¿½rea de Dados - Declaraï¿½ï¿½es de variï¿½veis
   27 00000000                 AREA             DATA, ALIGN=2
   28 00000000         ; Se alguma variï¿½vel for chamada em outro arquivo
   29 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       riï¿½vel <var> a 
   30 00000000         ; partir de outro arquivo
   31 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       variï¿½vel de nome <var>
   32 00000000         ; de <tam> bytes a partir da primeira 
   33 00000000         ; posiï¿½ï¿½o da RAM  
   34 00000000         ;=======
   35 00000000         ; posição da RAM 
   36 00000000         
   37 00000000         ; ------------------------------------------------------
                       -------------------------
   38 00000000         ; ï¿½rea de Cï¿½digo - Tudo abaixo da diretiva a seguir 
                       serï¿½ armazenado na memï¿½ria de 
   39 00000000         ;                  cï¿½digo
   40 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   41 00000000         
   42 00000000         ; Se alguma funï¿½ï¿½o do arquivo for chamada em outro a



ARM Macro Assembler    Page 2 


                       rquivo 
   43 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            funï¿½ï¿½o Start a 
                                                            partir de 
   44 00000000         ; outro arquivo. No caso startup.s
   45 00000000         
   46 00000000         ; Se chamar alguma funï¿½ï¿½o externa 
   47 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   48 00000000         ; funï¿½ï¿½o <func>
   49 00000000         
   50 00000000                 IMPORT           PLL_Init
   51 00000000                 IMPORT           SysTick_Init
   52 00000000                 IMPORT           SysTick_Wait1ms
   53 00000000                 IMPORT           LCD_Init    ; Permite chamar GP
                                                            IO_Init de outro ar
                                                            quivo
   54 00000000                 IMPORT           setup_LCD   ; ConfiguraÃ§Ã£o do
                                                             LCD
   55 00000000                 IMPORT           send_comand_lcd
   56 00000000                 IMPORT           send_complex_comand_lcd
   57 00000000                 IMPORT           send_data_lcd
   58 00000000         
   59 00000000         
   60 00000000                 IMPORT           GPIO_Init
   61 00000000         ;IMPORT  PortN_Output
   62 00000000                 IMPORT           PortJ_Input
   63 00000000                 IMPORT           PortQ_Output
   64 00000000                 IMPORT           PortA_Output
   65 00000000                 IMPORT           PortP_Output
   66 00000000                 IMPORT           PortM_Output_Teclado
   67 00000000                 IMPORT           PortM_Output_LCD
   68 00000000                 IMPORT           PortL_Input
   69 00000000         
   70 00000000         
   71 00000000         ; ------------------------------------------------------
                       -------------------------
   72 00000000         ; Funï¿½ï¿½o main()
   73 00000000         Start
   74 00000000 F7FF FFFE       BL               PLL_Init    ;Chama a subrotina 
                                                            para alterar o cloc
                                                            k do microcontrolad
                                                            or para 80MHz
   75 00000004 F7FF FFFE       BL               SysTick_Init ;Chama a subrotina
                                                             para inicializar o
                                                             SysTick
   76 00000008 F7FF FFFE       BL               GPIO_Init
   77 0000000C F7FF FFFE       BL               LCD_Init
   78 00000010 F7FF FFFE       BL               setup_LCD
   79 00000014         
   80 00000014 F04F 0061       MOV              R0, #97
   81 00000018 F7FF FFFE       BL               send_data_lcd
   82 0000001C         
   83 0000001C         
   84 0000001C         LimpaREGS_Tela_LEDS
   85 0000001C         
   86 0000001C F04F 0000       MOV              R0,#0
   87 00000020 F04F 0400       MOV              R4,#0       ; usado em Varredur
                                                            a



ARM Macro Assembler    Page 3 


   88 00000024 F04F 0600       MOV              R6,#0       ;R6 = base multipli
                                                            cacão
   89 00000028 F04F 0700       MOV              R7,#0       ;R7 = estado multip
                                                            licador
   90 0000002C F04F 0800       MOV              R8,#0       ;R8 = nova tecla de
                                                            tectada
   91 00000030 F04F 0900       MOV              R9,#0       ;R9 = tecla contage
                                                            m debounce
   92 00000034 F04F 0A00       MOV              R10,#0      ;R10= n estados deb
                                                            ounce
   93 00000038         
   94 00000038 483C            LDR              R0,=RESET_SW
   95 0000003A F04F 0100       MOV              R1,#0
   96 0000003E 6001            STR              R1,[R0]
   97 00000040 F04F 0000       MOV              R0,#0
   98 00000044 F04F 0100       MOV              R1,#0
   99 00000048         
  100 00000048         
  101 00000048         MainLoop
  102 00000048         
  103 00000048 F000 F855       BL               faz_Varredura
  104 0000004C         
  105 0000004C 4837            LDR              R0,=RESET_SW
  106 0000004E 6800            LDR              R0,[R0]
  107 00000050 2801            CMP              R0,#1
  108 00000052 BF08            IT               EQ
  109 00000054 E7E2            BEQ              LimpaREGS_Tela_LEDS
  110 00000056         
  111 00000056 F000 F801       BL               AscendeLed
  112 0000005A         
  113 0000005A E7F5            B                MainLoop
  114 0000005C         
  115 0000005C         ;-------------------------------------------------------
                       -------------------------
  116 0000005C         ; Funï¿½ï¿½o Pisca_LED
  117 0000005C         ; Parï¿½metro de entrada: Nï¿½o tem
  118 0000005C         ; Parï¿½metro de saï¿½da: Nï¿½o tem
  119 0000005C         Pisca_LED
  120 0000005C         ; Funï¿½ï¿½o Pisca_LED
  121 0000005C         ; Parï¿½metro de entrada: Nï¿½o tem
  122 0000005C         ; Parï¿½metro de saï¿½da: Nï¿½o tem
  123 0000005C         AscendeLed
  124 0000005C         ; ****************************************
  125 0000005C         ; Escrever funï¿½ï¿½o que acende o LED, espera 1 segundo
                       , apaga o LED e espera 1 s
  126 0000005C         ; Esta funï¿½ï¿½o deve chamar a rotina SysTick_Wait1ms c
                       om o parï¿½metro de entrada em R0
  127 0000005C         ; ****************************************
  128 0000005C B500            PUSH{LR}
  129 0000005E         
  130 0000005E 4630            MOV              R0,R6       ;#2_00001111
  131 00000060         ;MOV R0,#3
  132 00000060 F7FF FFFE       BL               PortQ_Output
  133 00000064 4630            MOV              R0,R6       ;#2_11110000
  134 00000066 F7FF FFFE       BL               PortA_Output
  135 0000006A F04F 00FF       MOV              R0,#2_11111111
  136 0000006E F7FF FFFE       BL               PortP_Output
  137 00000072 F85D EB04       POP{LR}
  138 00000076         



ARM Macro Assembler    Page 4 


  139 00000076 4770            BX               LR
  140 00000078         
  141 00000078         Varredura
  142 00000078 B500            PUSH{LR}
  143 0000007A F04F 0800       MOV              R8,#0
  144 0000007E F04F 0310       MOV              R3,#2_00010000
  145 00000082 F04F 0501       MOV              R5,#1
  146 00000086         
  147 00000086         Varredura_loop
  148 00000086 F083 00FF       EOR              R0,R3,#2_11111111 ; inverter bi
                                                            ts ligados
  149 0000008A         
  150 0000008A F7FF FFFE       BL               PortM_Output_Teclado
  151 0000008E F7FF FFFE       BL               PortL_Input
  152 00000092         
  153 00000092 F04F 04FF       MOV              R4,#2_11111111
  154 00000096         
  155 00000096 F080 000F       EOR              R0,R0,#2_1111 ; inverter bits l
                                                            igados
  156 0000009A         
  157 0000009A 2801            CMP              R0, #2_00000001
  158 0000009C BF08            IT               EQ
  159 0000009E 2400            MOVEQ            R4,#0
  160 000000A0         
  161 000000A0 2802            CMP              R0, #2_00000010
  162 000000A2 BF08            IT               EQ
  163 000000A4 2403            MOVEQ            R4,#3
  164 000000A6         
  165 000000A6 2804            CMP              R0, #2_00000100
  166 000000A8 BF08            IT               EQ
  167 000000AA 2406            MOVEQ            R4,#6
  168 000000AC         
  169 000000AC 2808            CMP              R0, #2_00001000
  170 000000AE BF08            IT               EQ
  171 000000B0 2409            MOVEQ            R4,#9
  172 000000B2         
  173 000000B2 2CFF            CMP              R4,#2_11111111
  174 000000B4 BF1C            ITT              NE
  175 000000B6 1964            ADDNE            R4,R4,R5
  176 000000B8 E008            BNE              Debounce_TRUE
  177 000000BA         
  178 000000BA F105 0501       ADD              R5,R5,#1
  179 000000BE EA4F 0343       LSL              R3,R3,#1
  180 000000C2 2B80            CMP              R3, #2_10000000
  181 000000C4 D1DF            BNE              Varredura_loop
  182 000000C6         
  183 000000C6         
  184 000000C6         
  185 000000C6         SaidaVarredura
  186 000000C6         
  187 000000C6         ; CMP R4,#2_11111111
  188 000000C6         ; IT NE
  189 000000C6         ;  BNE Debounce_TRUE
  190 000000C6         
  191 000000C6         Saida_deb
  192 000000C6         
  193 000000C6 F85D EB04       POP{LR}
  194 000000CA 4770            BX               LR
  195 000000CC         



ARM Macro Assembler    Page 5 


  196 000000CC         Debounce_TRUE
  197 000000CC         
  198 000000CC 2C0B            CMP              R4, #11
  199 000000CE BF08            IT               EQ
  200 000000D0 2400            MOVEQ            R4,#0       ; zerar R4 >=10
  201 000000D2         
  202 000000D2 2C0A            CMP              R4, #10
  203 000000D4 BF28            IT               HS
  204 000000D6 E7F6            BHS              Saida_deb   ; sair >=10
  205 000000D8         
  206 000000D8 454C            CMP              R4, R9      ; R4 = nova tecla a
                                                            pertada ; R9 = tecl
                                                            a contagem debounce
                                                             ;R10= n estados de
                                                            bounce
  207 000000DA BF0E            ITEE             EQ
  208 000000DC F10A 0A01       ADDEQ            R10,R10,#1
  209 000000E0 F04F 0A00       MOVNE            R10,#0
  210 000000E4 46A1            MOVNE            R9,R4
  211 000000E6         
  212 000000E6 F1BA 0F0A       CMP              R10,#10
  213 000000EA BF04            ITT              EQ
  214 000000EC F04F 0A00       MOVEQ            R10,#0
  215 000000F0 F04F 0801       MOVEQ            R8,#1
  216 000000F4         ;B   Saida_deb 
  217 000000F4         
  218 000000F4         
  219 000000F4         ;BNE Varredura
  220 000000F4 E7E7            B                Saida_deb
  221 000000F6         
  222 000000F6         faz_Varredura
  223 000000F6 B500            PUSH{LR}
  224 000000F8         
  225 000000F8         repete
  226 000000F8 F7FF FFBE       BL               Varredura
  227 000000FC F04F 0001       mov              R0,#1
  228 00000100         ;BL Sys-Tick_Wait1ms
  229 00000100 480A            LDR              R0,=RESET_SW
  230 00000102 6800            LDR              R0,[R0]
  231 00000104 2801            CMP              R0,#1
  232 00000106 BF08            IT               EQ
  233 00000108 E00D            BEQ              saida
  234 0000010A         
  235 0000010A F1B8 0F01       CMP              R8,#1
  236 0000010E         ;IT NE
  237 0000010E         ;BNE repete
  238 0000010E BF18            IT               NE
  239 00000110 E009            BNE              saida
  240 00000112 45B1            CMP              R9,R6
  241 00000114 BF1E            ITTT             NE
  242 00000116 464E            MOVNE            R6,R9
  243 00000118 2700            MOVNE            R7,#0
  244 0000011A E004            BNE              saida
  245 0000011C F107 0701       ADD              R7,#1
  246 00000120 2F0A            CMP              R7,#10
  247 00000122 BF28            IT               HS
  248 00000124 2700            MOVHS            R7,#0
  249 00000126         
  250 00000126         saida



ARM Macro Assembler    Page 6 


  251 00000126         
  252 00000126 F85D EB04       POP{LR}
  253 0000012A 4770            BX               LR
  254 0000012C         
  255 0000012C         
  256 0000012C         ; ------------------------------------------------------
                       --------------------------------------------------------
                       -----------
  257 0000012C         ; Fim do Arquivo
  258 0000012C         ; ------------------------------------------------------
                       --------------------------------------------------------
                       ----------- 
  259 0000012C                 ALIGN                        ;Garante que o fim 
                                                            da seï¿½ï¿½o estï¿½
                                                             alinhada 
  260 0000012C                 END                          ;Fim do arquivo
              20000A00 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4.fp.sp 
--depend=.\objects\main.d -o.\objects\main.o -IC:\Users\IanIshikawa\AppData\Loc
al\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 --predefine="__EVAL SET
A 1" --predefine="__UVISION_VERSION SETA 541" --predefine="TM4C1294NCPDT SETA 1
" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 27 in file main.s
   Uses
      None
Comment: DATA unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 40 in file main.s
   Uses
      None
Comment: .text unused
AscendeLed 0000005C

Symbol: AscendeLed
   Definitions
      At line 123 in file main.s
   Uses
      At line 111 in file main.s
Comment: AscendeLed used once
Debounce_TRUE 000000CC

Symbol: Debounce_TRUE
   Definitions
      At line 196 in file main.s
   Uses
      At line 176 in file main.s
Comment: Debounce_TRUE used once
LimpaREGS_Tela_LEDS 0000001C

Symbol: LimpaREGS_Tela_LEDS
   Definitions
      At line 84 in file main.s
   Uses
      At line 109 in file main.s
Comment: LimpaREGS_Tela_LEDS used once
MainLoop 00000048

Symbol: MainLoop
   Definitions
      At line 101 in file main.s
   Uses
      At line 113 in file main.s
Comment: MainLoop used once
Pisca_LED 0000005C

Symbol: Pisca_LED
   Definitions
      At line 119 in file main.s
   Uses
      None
Comment: Pisca_LED unused
SaidaVarredura 000000C6

Symbol: SaidaVarredura
   Definitions
      At line 185 in file main.s
   Uses
      None
Comment: SaidaVarredura unused
Saida_deb 000000C6

Symbol: Saida_deb



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 191 in file main.s
   Uses
      At line 204 in file main.s
      At line 220 in file main.s

Start 00000000

Symbol: Start
   Definitions
      At line 73 in file main.s
   Uses
      At line 43 in file main.s
Comment: Start used once
Varredura 00000078

Symbol: Varredura
   Definitions
      At line 141 in file main.s
   Uses
      At line 226 in file main.s
Comment: Varredura used once
Varredura_loop 00000086

Symbol: Varredura_loop
   Definitions
      At line 147 in file main.s
   Uses
      At line 181 in file main.s
Comment: Varredura_loop used once
faz_Varredura 000000F6

Symbol: faz_Varredura
   Definitions
      At line 222 in file main.s
   Uses
      At line 103 in file main.s
Comment: faz_Varredura used once
repete 000000F8

Symbol: repete
   Definitions
      At line 225 in file main.s
   Uses
      None
Comment: repete unused
saida 00000126

Symbol: saida
   Definitions
      At line 250 in file main.s
   Uses
      At line 233 in file main.s
      At line 239 in file main.s
      At line 244 in file main.s

14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ACENDE_LED 20000A08

Symbol: ACENDE_LED
   Definitions
      At line 19 in file main.s
   Uses
      None
Comment: ACENDE_LED unused
RESET_SW 20000A00

Symbol: RESET_SW
   Definitions
      At line 21 in file main.s
   Uses
      At line 94 in file main.s
      At line 105 in file main.s
      At line 229 in file main.s

TOGGLE_LED 20000A04

Symbol: TOGGLE_LED
   Definitions
      At line 20 in file main.s
   Uses
      None
Comment: TOGGLE_LED unused
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

GPIO_Init 00000000

Symbol: GPIO_Init
   Definitions
      At line 60 in file main.s
   Uses
      At line 76 in file main.s
Comment: GPIO_Init used once
LCD_Init 00000000

Symbol: LCD_Init
   Definitions
      At line 53 in file main.s
   Uses
      At line 77 in file main.s
Comment: LCD_Init used once
PLL_Init 00000000

Symbol: PLL_Init
   Definitions
      At line 50 in file main.s
   Uses
      At line 74 in file main.s
Comment: PLL_Init used once
PortA_Output 00000000

Symbol: PortA_Output
   Definitions
      At line 64 in file main.s
   Uses
      At line 134 in file main.s
Comment: PortA_Output used once
PortJ_Input 00000000

Symbol: PortJ_Input
   Definitions
      At line 62 in file main.s
   Uses
      None
Comment: PortJ_Input unused
PortL_Input 00000000

Symbol: PortL_Input
   Definitions
      At line 68 in file main.s
   Uses
      At line 151 in file main.s
Comment: PortL_Input used once
PortM_Output_LCD 00000000

Symbol: PortM_Output_LCD
   Definitions
      At line 67 in file main.s
   Uses
      None
Comment: PortM_Output_LCD unused
PortM_Output_Teclado 00000000

Symbol: PortM_Output_Teclado



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 66 in file main.s
   Uses
      At line 150 in file main.s
Comment: PortM_Output_Teclado used once
PortP_Output 00000000

Symbol: PortP_Output
   Definitions
      At line 65 in file main.s
   Uses
      At line 136 in file main.s
Comment: PortP_Output used once
PortQ_Output 00000000

Symbol: PortQ_Output
   Definitions
      At line 63 in file main.s
   Uses
      At line 132 in file main.s
Comment: PortQ_Output used once
SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 51 in file main.s
   Uses
      At line 75 in file main.s
Comment: SysTick_Init used once
SysTick_Wait1ms 00000000

Symbol: SysTick_Wait1ms
   Definitions
      At line 52 in file main.s
   Uses
      None
Comment: SysTick_Wait1ms unused
send_comand_lcd 00000000

Symbol: send_comand_lcd
   Definitions
      At line 55 in file main.s
   Uses
      None
Comment: send_comand_lcd unused
send_complex_comand_lcd 00000000

Symbol: send_complex_comand_lcd
   Definitions
      At line 56 in file main.s
   Uses
      None
Comment: send_complex_comand_lcd unused
send_data_lcd 00000000

Symbol: send_data_lcd
   Definitions
      At line 57 in file main.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

      At line 81 in file main.s
Comment: send_data_lcd used once
setup_LCD 00000000

Symbol: setup_LCD
   Definitions
      At line 54 in file main.s
   Uses
      At line 78 in file main.s
Comment: setup_LCD used once
16 symbols
370 symbols in table
